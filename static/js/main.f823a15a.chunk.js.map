{"version":3,"sources":["redux/pokemons/pokemonsTypes.ts","redux/pokemons/pokemonsReducer.ts","api/index.ts","api/pokemons.ts","redux/pokemons/pokemonsActions.ts","redux/rootReducer.ts","redux/store.ts","components/Pokemons/Pokemons.tsx","components/Pokemon/Pokemon.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GET_ALL_POKEMONS_STARTED","GET_ALL_POKEMONS_SUCCESS","GET_ALL_POKEMONS_ERROR","GET_POKEMON_STARTED","GET_POKEMON_SUCCESS","GET_POKEMON_ERROR","initialState","loadingAll","errorAll","loadingIds","Set","errorMap","Map","pokemons","instance","axios","create","baseURL","PokemonsAPI","get","data","cards","id","card","getPokemon","dispatch","a","getPokemonStarted","pokemon","getPokemonSuccess","getPokemonError","type","payload","error","getAllPokemons","getAllPokemonsStarted","getAllPokemonSuccess","getAllPokemonError","combineReducers","state","action","has","newSet","add","newState","delete","newMap","set","newErrMap","undefined","map","store","createStore","rootReducer","applyMiddleware","thunk","Pokemons","history","useHistory","useSelector","useDispatch","useEffect","columns","title","dataIndex","key","render","image","src","width","extra","onClick","icon","ReloadOutlined","message","description","JSON","stringify","dataSource","Array","from","values","loading","onRow","push","size","Text","Typography","Pokemon","useParams","onBack","subTitle","name","imageUrl","preview","imageUrlHiRes","column","Item","label","supertype","rarity","series","setCode","number","retreatCost","convertedRetreatCost","text","length","join","nationalPokedexNumber","types","hp","subtype","attacks","header","renderItem","cost","damage","convertedEnergyCost","resistances","value","weaknesses","ability","ancientTrait","artist","Header","Layout","Title","App","path","exact","className","level","gutter","justify","span","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f823a15a.chunk.js","sourcesContent":["export const GET_ALL_POKEMONS_STARTED = \"GET_ALL_POKEMONS_STARTED\";\r\n\r\nexport const GET_ALL_POKEMONS_SUCCESS = \"GET_ALL_POKEMONS_SUCCESS\";\r\n\r\nexport const GET_ALL_POKEMONS_ERROR = \"GET_ALL_POKEMONS_ERROR \";\r\n\r\nexport const GET_POKEMON_STARTED = \"GET_POKEMON_STARTED\";\r\n\r\nexport const GET_POKEMON_SUCCESS = \"GET_POKEMON_SUCCESS\";\r\n\r\nexport const GET_POKEMON_ERROR = \"GET_POKEMON_ERROR\";\r\n","import { IPokemon } from \"../../api/pokemonsTypes\";\r\nimport {\r\n  GET_POKEMON_STARTED,\r\n  GET_POKEMON_SUCCESS,\r\n  GET_POKEMON_ERROR,\r\n  GET_ALL_POKEMONS_STARTED,\r\n  GET_ALL_POKEMONS_SUCCESS,\r\n  GET_ALL_POKEMONS_ERROR,\r\n} from \"./pokemonsTypes\";\r\n\r\nexport interface IInitialState {\r\n  loadingAll: boolean;\r\n  errorAll: any;\r\n  loadingIds: Set<string>;\r\n  errorMap: Map<string, any>;\r\n  pokemons: Map<string, IPokemon>;\r\n}\r\n\r\nconst initialState: IInitialState = {\r\n  loadingAll: false,\r\n  errorAll: null,\r\n  loadingIds: new Set(),\r\n  errorMap: new Map(),\r\n  pokemons: new Map(),\r\n};\r\n\r\ninterface IAction {\r\n  type: string;\r\n  payload: any;\r\n}\r\n\r\nexport const pokemonReducer = (\r\n  state = initialState,\r\n  action: IAction\r\n): IInitialState => {\r\n  switch (action.type) {\r\n    case GET_POKEMON_STARTED: {\r\n      // Если прогрузка уже осуществляется, то возвращаем исходное состояние\r\n      // Иначе - копируем сет для иммутабельности изначального сета, добавляем\r\n      // в него новый айди, обновляем стор\r\n      if (state.loadingIds.has(action.payload.id)) {\r\n        return state;\r\n      } else {\r\n        const newSet = new Set(state.loadingIds);\r\n        newSet.add(action.payload.id);\r\n        return {\r\n          ...state,\r\n          loadingIds: newSet,\r\n        };\r\n      }\r\n    }\r\n\r\n    case GET_POKEMON_SUCCESS: {\r\n      const newState = { ...state };\r\n      // Удаляем id из загружающихся\r\n      if (state.loadingIds.has(action.payload.id)) {\r\n        const newSet = new Set(state.loadingIds);\r\n        newSet.delete(action.payload.id);\r\n        newState.loadingIds = newSet;\r\n      }\r\n      // Удаляем id из ошибок\r\n      if (state.errorMap.has(action.payload.id)) {\r\n        const newMap = new Map(state.errorMap);\r\n        newMap.delete(action.payload.id);\r\n        newState.errorMap = newMap;\r\n      }\r\n      // Копируем мэп покемонов для иммутабельности\r\n      // Удаляем предыдущие данные по покемону\r\n      // Добавляем новые данные по покемону\r\n      // Обновляем стор\r\n      const newMap = new Map(state.pokemons);\r\n      if (newMap.has(action.payload.id)) {\r\n        newMap.delete(action.payload.id);\r\n      }\r\n      newMap.set(action.payload.id, action.payload.pokemon);\r\n      newState.pokemons = newMap;\r\n      return newState;\r\n    }\r\n\r\n    case GET_POKEMON_ERROR: {\r\n      const newState = { ...state };\r\n      // Удаляем id из загружающихся\r\n      if (state.loadingIds.has(action.payload.id)) {\r\n        const newSet = new Set(state.loadingIds);\r\n        newSet.delete(action.payload.id);\r\n        newState.loadingIds = newSet;\r\n      }\r\n      // Копируем мэп ошибок для иммутабельности\r\n      // Удаляем предыдущие данные по ошибке по конкретному покемону\r\n      // Добавляем новые данные по ошибке по запросу конкретного покемона\r\n      // Обновляем стор\r\n      const newErrMap = new Map(state.errorMap);\r\n      if (newErrMap.has(action.payload.id)) {\r\n        newErrMap.delete(action.payload.id);\r\n      }\r\n      newErrMap.set(action.payload.id, action.payload.error);\r\n      newState.errorMap = newErrMap;\r\n      return newState;\r\n    }\r\n\r\n    case GET_ALL_POKEMONS_STARTED: {\r\n      // Ставим состояние loadingAll в true, т.к. прогружаем всех покемонов\r\n      return {\r\n        ...state,\r\n        loadingAll: true,\r\n      };\r\n    }\r\n\r\n    case GET_ALL_POKEMONS_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        loadingAll: false,\r\n        errorAll: undefined,\r\n        pokemons: new Map(\r\n          action.payload.pokemons.map((pokemon: IPokemon) => {\r\n            return [pokemon.id, pokemon];\r\n          })\r\n        ),\r\n      };\r\n    }\r\n\r\n    case GET_ALL_POKEMONS_ERROR: {\r\n      return {\r\n        ...state,\r\n        loadingAll: false,\r\n        errorAll: action.payload.error,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.pokemontcg.io/v1/cards\"\r\n})\r\n\r\nexport default instance;","import instance from \"./index\";\r\nimport { IPokemon } from \"./pokemonsTypes\";\r\n\r\ninterface IPokemonsAPI {\r\n  getAllPokemons: () => Promise<Array<IPokemon>>;\r\n  getPokemon: (id: string) => Promise<IPokemon>;\r\n}\r\n\r\nexport const PokemonsAPI: IPokemonsAPI = {\r\n  async getAllPokemons() {\r\n    const data: IGetAllPokemons = await instance.get(\"/\");\r\n    return data.data.cards;\r\n  },\r\n  async getPokemon(id) {\r\n    const data: IGetPokemon = await instance.get(\"/\" + id);\r\n    return data.data.card;\r\n  },\r\n};\r\n\r\ninterface IGetAllPokemons {\r\n  data: {\r\n    cards: Array<IPokemon>;\r\n  };\r\n}\r\n\r\ninterface IGetPokemon {\r\n  data: {\r\n    card: IPokemon;\r\n  };\r\n}\r\n","import {\r\n  GET_POKEMON_STARTED,\r\n  GET_POKEMON_SUCCESS,\r\n  GET_POKEMON_ERROR,\r\n  GET_ALL_POKEMONS_STARTED,\r\n  GET_ALL_POKEMONS_SUCCESS,\r\n  GET_ALL_POKEMONS_ERROR,\r\n} from \"./\";\r\nimport { PokemonsAPI } from \"../../api/pokemons\";\r\nimport { IPokemon } from \"../../api/pokemonsTypes\";\r\nimport Redux from \"redux\";\r\n\r\nexport const getPokemon = async (id: string, dispatch: Redux.Dispatch) => {\r\n  dispatch(getPokemonStarted(id));\r\n  try {\r\n    const pokemon = await PokemonsAPI.getPokemon(id);\r\n    dispatch(getPokemonSuccess(id, pokemon));\r\n  } catch (error) {\r\n    dispatch(getPokemonError(id, error));\r\n  }\r\n};\r\n\r\nconst getPokemonStarted = (id: string) => ({\r\n  type: GET_POKEMON_STARTED,\r\n  payload: {\r\n    id,\r\n  },\r\n});\r\n\r\nconst getPokemonSuccess = (id: string, pokemon: IPokemon) => {\r\n  return {\r\n    type: GET_POKEMON_SUCCESS,\r\n    payload: {\r\n      id,\r\n      pokemon,\r\n    },\r\n  };\r\n};\r\nconst getPokemonError = (id: string, error: any) => ({\r\n  type: GET_POKEMON_ERROR,\r\n  payload: {\r\n    id,\r\n    error,\r\n  },\r\n});\r\n\r\nexport const getAllPokemons = async (dispatch: Redux.Dispatch) => {\r\n  dispatch(getAllPokemonsStarted());\r\n  try {\r\n    const pokemons = await PokemonsAPI.getAllPokemons();\r\n    dispatch(getAllPokemonSuccess(pokemons));\r\n  } catch (error) {\r\n    dispatch(getAllPokemonError(error));\r\n  }\r\n};\r\n\r\nconst getAllPokemonsStarted = () => ({\r\n  type: GET_ALL_POKEMONS_STARTED,\r\n});\r\n\r\nconst getAllPokemonSuccess = (pokemons: Array<IPokemon>) => ({\r\n  type: GET_ALL_POKEMONS_SUCCESS,\r\n  payload: {\r\n    pokemons,\r\n  },\r\n});\r\n\r\nconst getAllPokemonError = (error: any) => ({\r\n  type: GET_ALL_POKEMONS_ERROR,\r\n  payload: {\r\n    error,\r\n  },\r\n});\r\n","import { combineReducers } from \"redux\";\r\nimport { pokemonReducer } from \"./pokemons\";\r\nimport { IInitialState as PokemonsInitialState } from \"./pokemons\";\r\n\r\nexport interface IRootState {\r\n  pokemons: PokemonsInitialState;\r\n}\r\n\r\nexport default combineReducers({\r\n  pokemons: pokemonReducer,\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./rootReducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { IRootState } from \"../../redux/rootReducer\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getAllPokemons } from \"../../redux/pokemons\";\r\nimport { Table, Empty, Alert, PageHeader, Button } from \"antd\";\r\nimport { IPokemon } from \"../../api/pokemonsTypes\";\r\nimport { ReloadOutlined } from \"@ant-design/icons\";\r\n\r\nexport const Pokemons = () => {\r\n  const history = useHistory();\r\n\r\n  const { loadingAll, errorAll, pokemons } = useSelector(\r\n    ({ pokemons }: IRootState) => ({\r\n      loadingAll: pokemons.loadingAll,\r\n      errorAll: pokemons.errorAll,\r\n      pokemons: pokemons.pokemons,\r\n    })\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    getAllPokemons(dispatch);\r\n  }, []);\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Image\",\r\n      dataIndex: \"imageUrl\",\r\n      key: \"imageUrl\",\r\n      render: (image: string) => <img src={image} />,\r\n      width: 250,\r\n    },\r\n    {\r\n      title: \"Id\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n    },\r\n    {\r\n      title: \"Rarity\",\r\n      dataIndex: \"rarity\",\r\n      key: \"rarity\",\r\n    },\r\n    {\r\n      title: \"Supertype\",\r\n      dataIndex: \"supertype\",\r\n      key: \"supertype\",\r\n    },\r\n    {\r\n      title: \"Series\",\r\n      dataIndex: \"series\",\r\n      key: \"series\",\r\n    },\r\n    {\r\n      title: \"Number\",\r\n      dataIndex: \"number\",\r\n      key: \"number\",\r\n    },\r\n    {\r\n      title: \"Artist\",\r\n      dataIndex: \"artist\",\r\n      key: \"artist\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <PageHeader\r\n        title=\"Pokemons\"\r\n        extra={[\r\n          <Button\r\n            onClick={() => getAllPokemons(dispatch)}\r\n            type=\"primary\"\r\n            icon={<ReloadOutlined />}\r\n          />,\r\n        ]}\r\n      />\r\n      {errorAll && !loadingAll && (\r\n        <Alert\r\n          message=\"An error occurred on this page\"\r\n          description={\r\n            errorAll.message ? errorAll.message : JSON.stringify(errorAll)\r\n          }\r\n          type=\"error\"\r\n        />\r\n      )}\r\n      {!errorAll && (\r\n        <Table\r\n          dataSource={Array.from(pokemons.values())}\r\n          columns={columns}\r\n          loading={loadingAll}\r\n          onRow={({ id }: IPokemon) => {\r\n            return {\r\n              onClick: () => {\r\n                history.push(`/chesstery-test/pokemons/${id}`);\r\n              },\r\n            };\r\n          }}\r\n        />\r\n      )}\r\n      {!loadingAll && (!pokemons || pokemons.size === 0) && (\r\n        <Empty description={<span>No Pokemons found</span>} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport {\r\n  Alert,\r\n  Card,\r\n  PageHeader,\r\n  Descriptions,\r\n  Typography,\r\n  Image,\r\n  List,\r\n  Button,\r\n} from \"antd\";\r\nimport { ReloadOutlined } from \"@ant-design/icons\";\r\nimport { getPokemon } from \"../../redux/pokemons\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { IRootState } from \"../../redux/rootReducer\";\r\n\r\nconst { Text } = Typography;\r\n\r\nexport const Pokemon = () => {\r\n  const { id }: any = useParams();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { loadingIds, errorMap, pokemons } = useSelector(\r\n    ({ pokemons }: IRootState) => ({\r\n      loadingIds: pokemons.loadingIds,\r\n      errorMap: pokemons.errorMap,\r\n      pokemons: pokemons.pokemons,\r\n    })\r\n  );\r\n\r\n  useEffect(() => {\r\n    getPokemon(id, dispatch);\r\n  }, []);\r\n\r\n  const history = useHistory();\r\n\r\n  const pokemon = pokemons.get(id);\r\n\r\n  return (\r\n    <>\r\n      <PageHeader\r\n        onBack={() => history.push(\"/chesstery-test/pokemons\")}\r\n        title=\"Pokemons\"\r\n        subTitle={id}\r\n        extra={[\r\n          <Button\r\n            onClick={() => getPokemon(id, dispatch)}\r\n            type=\"primary\"\r\n            icon={<ReloadOutlined />}\r\n          />,\r\n        ]}\r\n      />\r\n      {errorMap.has(id) && (\r\n        <Alert\r\n          message=\"An error occurred on this page\"\r\n          description={errorMap.get(id).message ? errorMap.get(id).message : JSON.stringify(errorMap.get(id))}\r\n          type=\"error\"\r\n        />\r\n      )}\r\n      {!errorMap.has(id) && (\r\n        <Card loading={loadingIds.has(id)} title={pokemon?.name}>\r\n          {pokemon && (\r\n            <>\r\n              <Image\r\n                width={200}\r\n                src={pokemon.imageUrl}\r\n                preview={{\r\n                  src: pokemon.imageUrlHiRes,\r\n                }}\r\n              />\r\n              <Descriptions column={2}>\r\n                <Descriptions.Item label=\"Name\">\r\n                  {pokemon.name}\r\n                </Descriptions.Item>\r\n                <Descriptions.Item label=\"Supertype\">\r\n                  {pokemon.supertype}\r\n                </Descriptions.Item>\r\n                <Descriptions.Item label=\"Rarity\">\r\n                  {pokemon.rarity}\r\n                </Descriptions.Item>\r\n                <Descriptions.Item label=\"Id\">{pokemon.id}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Series\">\r\n                  {pokemon.series}\r\n                </Descriptions.Item>\r\n                <Descriptions.Item label=\"Set Code\">\r\n                  {pokemon.setCode}\r\n                </Descriptions.Item>\r\n                <Descriptions.Item label=\"Number\">\r\n                  {pokemon.number}\r\n                </Descriptions.Item>\r\n                {pokemon.retreatCost && (\r\n                  <Descriptions.Item label=\"Retreat cost\">\r\n                    {pokemon.retreatCost}\r\n                  </Descriptions.Item>\r\n                )}\r\n                {pokemon.convertedRetreatCost && (\r\n                  <Descriptions.Item label=\"Converted retreat cost\">\r\n                    {pokemon.convertedRetreatCost}\r\n                  </Descriptions.Item>\r\n                )}\r\n                {pokemon.text && pokemon.text.length && (\r\n                  <Descriptions.Item label=\"Text\">\r\n                    {pokemon.text.join(\";\\n\")}\r\n                  </Descriptions.Item>\r\n                )}\r\n                {pokemon.nationalPokedexNumber !== undefined && (\r\n                  <Descriptions.Item label=\"National pokedex number\">\r\n                    {pokemon.nationalPokedexNumber}\r\n                  </Descriptions.Item>\r\n                )}\r\n                {pokemon.types && (\r\n                  <Descriptions.Item label=\"Types\">\r\n                    {pokemon.types.join(\"; \")}\r\n                  </Descriptions.Item>\r\n                )}\r\n                {pokemon.hp && (\r\n                  <Descriptions.Item label=\"HP\">{pokemon.hp}</Descriptions.Item>\r\n                )}\r\n                {pokemon.set && (\r\n                  <Descriptions.Item label=\"Set\">\r\n                    {pokemon.set}\r\n                  </Descriptions.Item>\r\n                )}\r\n                {pokemon.subtype && (\r\n                  <Descriptions.Item label=\"Subtype\">\r\n                    {pokemon.subtype}\r\n                  </Descriptions.Item>\r\n                )}\r\n              </Descriptions>\r\n              <Descriptions column={1}>\r\n                {pokemon.attacks && pokemon.attacks.length && (\r\n                  <Descriptions.Item>\r\n                    <List\r\n                      header={<div>Attacks</div>}\r\n                      dataSource={pokemon.attacks}\r\n                      renderItem={({\r\n                        cost,\r\n                        name,\r\n                        text,\r\n                        damage,\r\n                        convertedEnergyCost,\r\n                      }) => (\r\n                        <List.Item>\r\n                          <Typography.Text>\r\n                            Name: {name}\r\n                            <br />\r\n                            Cost: {cost.join(\", \")}\r\n                            <br />\r\n                            Text: {text}\r\n                            <br />\r\n                            Damage: {damage}\r\n                            <br />\r\n                            Converted Energy Cost: {convertedEnergyCost}\r\n                            <br />\r\n                          </Typography.Text>\r\n                        </List.Item>\r\n                      )}\r\n                    />\r\n                  </Descriptions.Item>\r\n                )}\r\n                {pokemon.resistances && pokemon.resistances.length && (\r\n                  <Descriptions.Item>\r\n                    <List\r\n                      header={<div>Resistances</div>}\r\n                      dataSource={pokemon.resistances}\r\n                      renderItem={({ type, value }) => (\r\n                        <List.Item>\r\n                          <Typography.Text>\r\n                            Type: {type}\r\n                            <br />\r\n                            Value: {value}\r\n                            <br />\r\n                          </Typography.Text>\r\n                        </List.Item>\r\n                      )}\r\n                    />\r\n                  </Descriptions.Item>\r\n                )}\r\n                {pokemon.weaknesses && pokemon.weaknesses.length && (\r\n                  <Descriptions.Item>\r\n                    <List\r\n                      header={<div>Weaknesses</div>}\r\n                      dataSource={pokemon.weaknesses}\r\n                      renderItem={({ type, value }) => (\r\n                        <List.Item>\r\n                          <Typography.Text>\r\n                            Type: {type}\r\n                            <br />\r\n                            Value: {value}\r\n                            <br />\r\n                          </Typography.Text>\r\n                        </List.Item>\r\n                      )}\r\n                    />\r\n                  </Descriptions.Item>\r\n                )}\r\n                {pokemon.ability && (\r\n                  <Descriptions.Item label=\"Ability\">\r\n                    <Typography.Text>\r\n                      Name: {pokemon.ability.name}\r\n                      <br />\r\n                      Text: {pokemon.ability.text}\r\n                      <br />\r\n                      Type: {pokemon.ability.type}\r\n                      <br />\r\n                    </Typography.Text>\r\n                  </Descriptions.Item>\r\n                )}\r\n                {pokemon.ancientTrait && (\r\n                  <Descriptions.Item label=\"Ancient Trait\">\r\n                    <Typography.Text>\r\n                      Name: {pokemon.ancientTrait.name}\r\n                      <br />\r\n                      Text: {pokemon.ancientTrait.text}\r\n                      <br />\r\n                    </Typography.Text>\r\n                  </Descriptions.Item>\r\n                )}\r\n              </Descriptions>\r\n              <Text type=\"secondary\">Artist: {pokemon.artist}</Text>\r\n            </>\r\n          )}\r\n        </Card>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pokemon;\r\n","import { Layout, Row, Col, Typography } from \"antd\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./redux/store\";\r\nimport { Pokemons } from \"./components/Pokemons/Pokemons\";\r\nimport { Pokemon } from \"./components/Pokemon/Pokemon\";\r\n\r\nimport \"./App.scss\";\r\n\r\nconst { Header } = Layout;\r\nconst { Title } = Typography;\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/chesstery-test/404\" exact>\r\n            <Title>Page Not Found</Title>\r\n          </Route>\r\n          <Route>\r\n            <Header className=\"header\">\r\n              <Title id=\"brand\" level={2}>\r\n                TEST ASSIGNMENT \r\n              </Title>\r\n            </Header>\r\n            <Row gutter={16} justify=\"center\" className=\"main\">\r\n              <Col span={22}>\r\n                <Switch>\r\n                  <Route exact path=\"/chesstery-test/\">\r\n                    <Redirect to=\"/chesstery-test/pokemons\" />\r\n                  </Route>\r\n                  <Route path=\"/chesstery-test/pokemons/:id\">\r\n                    <Pokemon />\r\n                  </Route>\r\n                  <Route exact path=\"/chesstery-test/pokemons\">\r\n                    <Pokemons />\r\n                  </Route>\r\n                  <Route>\r\n                    <Redirect to=\"/chesstery-test/404\" />\r\n                  </Route>\r\n                </Switch>\r\n              </Col>\r\n            </Row>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}